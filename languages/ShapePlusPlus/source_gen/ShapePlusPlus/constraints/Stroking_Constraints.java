package ShapePlusPlus.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeChild;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Stroking_Constraints extends BaseConstraintsDescriptor {
  public Stroking_Constraints() {
    super(CONCEPTS.Stroking$Sy);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeChild, Boolean> calculateCanBeChildConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeChild, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeChild context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAChild(context.getNode(), context.getParentNode(), context.getConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
        }

        return result;
      }
    };
  }
  private static boolean staticCanBeAChild(SNode node, SNode parentNode, SAbstractConcept childConcept, SContainmentLink link) {
    return !(SNodeOperations.isInstanceOf(parentNode, CONCEPTS.Stroking$Sy) || SNodeOperations.isInstanceOf(parentNode, CONCEPTS.Filling$HM)) && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(parentNode), CONCEPTS.Stroking$Sy) || SNodeOperations.isInstanceOf(SNodeOperations.getParent(parentNode), CONCEPTS.Filling$HM));
  }
  private static final SNodePointer canBeChildBreakingPoint = new SNodePointer("r:bd2d20e8-94b3-4c45-aa97-838277808038(ShapePlusPlus.constraints)", "5884675094285196493");

  private static final class CONCEPTS {
    /*package*/ static final SConcept Stroking$Sy = MetaAdapterFactory.getConcept(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa05b0dL, "ShapePlusPlus.structure.Stroking");
    /*package*/ static final SConcept Filling$HM = MetaAdapterFactory.getConcept(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa120c6L, "ShapePlusPlus.structure.Filling");
  }
}
