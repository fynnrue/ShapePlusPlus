package ShapePlusPlus.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Circle_Constraints extends BaseConstraintsDescriptor {
  public Circle_Constraints() {
    super(CONCEPTS.Circle$TT);
  }

  public static class Radius_Property extends BasePropertyConstraintsDescriptor {
    public Radius_Property(ConstraintsDescriptor container) {
      super(PROPS.radius$DVQW, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castInteger(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:bd2d20e8-94b3-4c45-aa97-838277808038(ShapePlusPlus.constraints)", "5884675094284675575"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, int propertyValue) {
      return propertyValue >= 0 && propertyValue <= 50;
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.radius$DVQW, new Radius_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Circle$TT = MetaAdapterFactory.getConcept(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa120caL, "ShapePlusPlus.structure.Circle");
  }

  private static final class PROPS {
    /*package*/ static final SProperty radius$DVQW = MetaAdapterFactory.getProperty(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa120caL, 0x2a25f81c5aa120cbL, "radius");
  }
}
