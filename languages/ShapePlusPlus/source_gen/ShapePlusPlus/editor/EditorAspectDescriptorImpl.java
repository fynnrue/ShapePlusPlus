package ShapePlusPlus.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Binding_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Circle_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Color_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Coloring_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Filling_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Horizontally_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new List_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Overlapping_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Rectangle_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Stroking_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new VariableDeclaration_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new VariableReference_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Vertically_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new VariableReference_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x64516100fd628d32L), MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa120caL), MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x64516100fd618e0dL), MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa120c8L), MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa120c6L), MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa05b06L), MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa05b11L), MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa120abL), MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa05b07L), MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa05b0dL), MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa05b10L), MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa05b0eL), MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa120aaL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x9710ea29960d4c8dL, 0xbfcbd895aec7ff5bL, 0x2a25f81c5aa05b0eL)).seal();
}
